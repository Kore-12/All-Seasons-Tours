class PassengerPicker extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });

    this.shadowRoot.innerHTML = `
      <style>
        :host {
          display: inline-block;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          font-size: 16px;
        }
        * {
          box-sizing: border-box;
        }

        #passengerContainer {
          position: relative; /* Important: container for dropdown */
          display: inline-block;
        }

        #passengerInput {
          width: 240px;
          padding: 10px 14px;
          border: 1px solid #a5d6a7;
          border-radius: 12px;
          font-size: 16px;
          cursor: pointer;
          outline: none;
        }

        .dropdown {
          display: none;
          margin-top: 8px;
          width: 280px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 8px 16px rgba(0,0,0,0.15);
          padding: 10px;
          position: absolute;
          top: 100%; /* Just below input */
          left: 50%;
          transform: translateX(-50%); /* Centered with input */
          z-index: 1000;
        }

        .dropdown.active {
          display: block;
        }

        .row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin: 10px 0;
        }

        .labels {
          display: flex;
          flex-direction: column;
        }

        .labels span:first-child {
          font-weight: bold;
          color: #cc6600;
          font-size: 16px;
        }

        .labels span:last-child {
          font-size: 14px;
          color: #aaa;
        }

        .controls {
          display: flex;
          align-items: center;
        }

        .controls button {
          width: 28px;
          height: 28px;
          border: 2px solid #4CAF50;
          color: #4CAF50;
          border-radius: 50%;
          background: none;
          font-size: 18px;
          line-height: 20px;
          cursor: pointer;
        }

        .controls span {
          width: 24px;
          text-align: center;
          margin: 0 8px;
          font-weight: bold;
          color: orange;
          font-size: 16px;
        }

        .controls button:disabled {
          opacity: 0.3;
          cursor: not-allowed;
        }
      </style>

      <div id="passengerContainer">
        <input type="text" id="passengerInput" readonly placeholder="Passenger Count" />
        <div class="dropdown" id="passengerDropdown">
          <div class="row">
            <div class="labels">
              <span>Adult</span>
              <span>(11+)</span>
            </div>
            <div class="controls">
              <button type="button" id="adultMinus">−</button>
              <span id="adultCount">0</span>
              <button type="button" id="adultPlus">+</button>
            </div>
          </div>
          <div class="row">
            <div class="labels">
              <span>Child</span>
              <span>(2–11)</span>
            </div>
            <div class="controls">
              <button type="button" id="childMinus">−</button>
              <span id="childCount">0</span>
              <button type="button" id="childPlus">+</button>
            </div>
          </div>
          <div class="row">
            <div class="labels">
              <span>Infant</span>
              <span>(0–2)</span>
            </div>
            <div class="controls">
              <button type="button" id="infantMinus">−</button>
              <span id="infantCount">0</span>
              <button type="button" id="infantPlus">+</button>
            </div>
          </div>
        </div>
      </div>
    `;

    this.counts = { adult: 0, child: 0, infant: 0 };
  }

  connectedCallback() {
    const input = this.shadowRoot.getElementById("passengerInput");
    const dropdown = this.shadowRoot.getElementById("passengerDropdown");

    dropdown.addEventListener("click", (e) => e.stopPropagation());
    input.addEventListener("click", (e) => {
      dropdown.classList.toggle("active");
      e.stopPropagation();
    });
    document.addEventListener("click", () => dropdown.classList.remove("active"));

    this.shadowRoot.getElementById("adultMinus").addEventListener("click", () => this.updateCount('adult', -1));
    this.shadowRoot.getElementById("adultPlus").addEventListener("click", () => this.updateCount('adult', 1));
    this.shadowRoot.getElementById("childMinus").addEventListener("click", () => this.updateCount('child', -1));
    this.shadowRoot.getElementById("childPlus").addEventListener("click", () => this.updateCount('child', 1));
    this.shadowRoot.getElementById("infantMinus").addEventListener("click", () => this.updateCount('infant', -1));
    this.shadowRoot.getElementById("infantPlus").addEventListener("click", () => this.updateCount('infant', 1));
  }

  updateCount(type, delta) {
    this.counts[type] = Math.max(0, this.counts[type] + delta);
    this.shadowRoot.getElementById(`${type}Count`).textContent = this.counts[type];
    this.updateInput();
  }

  updateInput() {
    const input = this.shadowRoot.getElementById("passengerInput");
    const total = this.counts.adult + this.counts.child + this.counts.infant;
    if (total === 0) {
      input.value = '';
      input.placeholder = "Passenger Count";
    } else {
      let parts = [];
      if (this.counts.adult > 0) parts.push(`${this.counts.adult} Adult${this.counts.adult > 1 ? 's' : ''}`);
      if (this.counts.child > 0) parts.push(`${this.counts.child} Child${this.counts.child > 1 ? 'ren' : ''}`);
      if (this.counts.infant > 0) parts.push(`${this.counts.infant} Infant${this.counts.infant > 1 ? 's' : ''}`);
      input.value = parts.join(', ');
    }
  }
}

customElements.define('passenger-picker', PassengerPicker);
